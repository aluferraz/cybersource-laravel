<?php
/**
 * PayerAuthenticationApi
 * PHP version 5
 *
 * @category Class
 * @package  Haque\Cybersource\CybersourceSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Haque\Cybersource\CybersourceSDK Merged Spec
 *
 * All Haque\Cybersource\CybersourceSDK API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Haque\Cybersource\CybersourceSDK\Api;

use \Haque\Cybersource\CybersourceSDK\ApiClient;
use \Haque\Cybersource\CybersourceSDK\ApiException;
use \Haque\Cybersource\CybersourceSDK\Configuration;
use \Haque\Cybersource\CybersourceSDK\ObjectSerializer;

/**
 * PayerAuthenticationApi Class Doc Comment
 *
 * @category Class
 * @package  Haque\Cybersource\CybersourceSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayerAuthenticationApi
{
    /**
     * API Client
     *
     * @var \Haque\Cybersource\CybersourceSDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Haque\Cybersource\CybersourceSDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Haque\Cybersource\CybersourceSDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Haque\Cybersource\CybersourceSDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Haque\Cybersource\CybersourceSDK\ApiClient $apiClient set the API client
     *
     * @return PayerAuthenticationApi
     */
    public function setApiClient(\Haque\Cybersource\CybersourceSDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation checkPayerAuthEnrollment
     *
     * Check Payer Auth Enrollment
     *
     * @param \Haque\Cybersource\CybersourceSDK\Model\CheckPayerAuthEnrollmentRequest $checkPayerAuthEnrollmentRequest  (required)
     * @throws \Haque\Cybersource\CybersourceSDK\ApiException on non-2xx response
     * @return array of \Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationsPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkPayerAuthEnrollment($checkPayerAuthEnrollmentRequest)
    {
        list($response, $statusCode, $httpHeader) = $this->checkPayerAuthEnrollmentWithHttpInfo($checkPayerAuthEnrollmentRequest);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation checkPayerAuthEnrollmentWithHttpInfo
     *
     * Check Payer Auth Enrollment
     *
     * @param \Haque\Cybersource\CybersourceSDK\Model\CheckPayerAuthEnrollmentRequest $checkPayerAuthEnrollmentRequest  (required)
     * @throws \Haque\Cybersource\CybersourceSDK\ApiException on non-2xx response
     * @return array of \Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationsPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkPayerAuthEnrollmentWithHttpInfo($checkPayerAuthEnrollmentRequest)
    {
        // verify the required parameter 'checkPayerAuthEnrollmentRequest' is set
        if ($checkPayerAuthEnrollmentRequest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $checkPayerAuthEnrollmentRequest when calling checkPayerAuthEnrollment');
        }
        // parse inputs
        $resourcePath = "/risk/v1/authentications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/hal+json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // body params
        $_tempBody = null;
        if (isset($checkPayerAuthEnrollmentRequest)) {
            $_tempBody = $checkPayerAuthEnrollmentRequest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationsPost201Response',
                '/risk/v1/authentications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationsPost201Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationsPost201Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationExcemptionsPost400Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\PtsV2PaymentsPost502Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation payerAuthSetup
     *
     * Setup Payer Auth
     *
     * @param \Haque\Cybersource\CybersourceSDK\Model\PayerAuthSetupRequest $payerAuthSetupRequest  (required)
     * @throws \Haque\Cybersource\CybersourceSDK\ApiException on non-2xx response
     * @return array of \Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationSetupsPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function payerAuthSetup($payerAuthSetupRequest)
    {
        list($response, $statusCode, $httpHeader) = $this->payerAuthSetupWithHttpInfo($payerAuthSetupRequest);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation payerAuthSetupWithHttpInfo
     *
     * Setup Payer Auth
     *
     * @param \Haque\Cybersource\CybersourceSDK\Model\PayerAuthSetupRequest $payerAuthSetupRequest  (required)
     * @throws \Haque\Cybersource\CybersourceSDK\ApiException on non-2xx response
     * @return array of \Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationSetupsPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function payerAuthSetupWithHttpInfo($payerAuthSetupRequest)
    {
        // verify the required parameter 'payerAuthSetupRequest' is set
        if ($payerAuthSetupRequest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payerAuthSetupRequest when calling payerAuthSetup');
        }
        // parse inputs
        $resourcePath = "/risk/v1/authentication-setups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/hal+json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // body params
        $_tempBody = null;
        if (isset($payerAuthSetupRequest)) {
            $_tempBody = $payerAuthSetupRequest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationSetupsPost201Response',
                '/risk/v1/authentication-setups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationSetupsPost201Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationSetupsPost201Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationsPost400Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\PtsV2PaymentsPost502Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation validateAuthenticationResults
     *
     * Validate Authentication Results
     *
     * @param \Haque\Cybersource\CybersourceSDK\Model\ValidateRequest $validateRequest  (required)
     * @throws \Haque\Cybersource\CybersourceSDK\ApiException on non-2xx response
     * @return array of \Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationResultsPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateAuthenticationResults($validateRequest)
    {
        list($response, $statusCode, $httpHeader) = $this->validateAuthenticationResultsWithHttpInfo($validateRequest);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation validateAuthenticationResultsWithHttpInfo
     *
     * Validate Authentication Results
     *
     * @param \Haque\Cybersource\CybersourceSDK\Model\ValidateRequest $validateRequest  (required)
     * @throws \Haque\Cybersource\CybersourceSDK\ApiException on non-2xx response
     * @return array of \Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationResultsPost201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateAuthenticationResultsWithHttpInfo($validateRequest)
    {
        // verify the required parameter 'validateRequest' is set
        if ($validateRequest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $validateRequest when calling validateAuthenticationResults');
        }
        // parse inputs
        $resourcePath = "/risk/v1/authentication-results";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/hal+json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // body params
        $_tempBody = null;
        if (isset($validateRequest)) {
            $_tempBody = $validateRequest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationResultsPost201Response',
                '/risk/v1/authentication-results'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationResultsPost201Response', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationResultsPost201Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\RiskV1AuthenticationExcemptionsPost400Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Haque\Cybersource\CybersourceSDK\Model\PtsV2PaymentsPost502Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
